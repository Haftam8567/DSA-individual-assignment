algorithm of pointer sorting using insertion ,bubbleand selection sort and comlexity analaysis and summary
insertion sort algorithm:
Go through each element from start to end.
 Print each one with a space.
Printarray (Reverse):
 Go through each element from end to start.
 Print each one with a space.

Main Function:
Create the array.
Show original array.
 Sort using insertion sort.
 Show sorted array.
 Show reverse sorted array.
. Display a message.
TIME complexity:Best Case:0(n)
worst case/average case 0(n)squear

selection sort algorithm:

Divide the list into two parts:

Sorted (left side)

Unsorted (right side)

Find the smallest number in the unsorted part.

Swap it with the leftmost number in the unsorted part.

Move the boundary of the sorted part one step to the right.

Repeat until the entire list is sorted.
Time Complexity
Best Case: O(n²)

Average Case: O(n²)

Worst Case: O(n²)
algorithm of bubble sort:

Start with an unsorted array.

For each element in the array (from index 0 to size-1):

Compare adjacent pairs of elements from the start to the end of the unsorted portion.

Swap them if the current element is greater than the next element.

Repeat step 2 until the entire array is sorted.

Time Complexity Analysis:

Worst/Average Case: O(n²)

Best Case: O(n²)
comparation :
Insertion Sort: Builds the sorted array by inserting each unsorted element into its correct position in the sorted subarray.

Selection Sort: Selects the smallest element from the unsorted subarray and swaps it with the first unsorted element.

Bubble Sort: Repeatedly swaps adjacent elements if they are in the wrong order, "bubbling" larger values to the end.
 summary:
 The code compares three sorting techniques, sorts an array, and shows the result in both increasing and decreasing order. All methods work differently but achieve the same sorted result.








